/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <iostream>
#include<vector>
#include<numeric>
#include<algorithm>
#include<map>
#include<string>
#include <bits/stdc++.h>
using namespace std;

bool cmp(pair<string, int>& a, 
         pair<string, int>& b) 
{ 
    return a.second > b.second; 
} 

int randomfunc(int j) 
{ 
    return rand() % j; 
}

int main()
{
    int n,m;
    cout<<"Enter number of players N : ";
    cin>>n;
    cout<<"Enter score for completion M : ";
    cin>>m;
    std::vector<int> players(n) ;
    std::iota(players.begin(),players.end(),1);
    unsigned seed = 0; 
    std::shuffle(players.begin(),players.end(),default_random_engine(seed));
    bool stop = 0;
    char roll;
    int scores_one[n],scores_two[n];
    std::map <string,int> scoreCard;
    for(int i=0;i<n;i++){
        string key =  to_string(players[i]);
        scoreCard.insert({key,0});
    }
    cout<<"Game Started ... \n";
    while(!stop)
    {
        int i =0;
        for(int x: players)
        {
            if(scoreCard.find(to_string(players[i]))->second>=m){
                i++;continue;
            }
            if(scores_one[i] == 1 && scores_two[i] == 1){
                i++;
                scores_one[i] = 0;
                scores_two[i] = 0;
                continue;
            }
            cout<<"player - "<<x<<" its your turn(press r to roll the dice)";
            rollDice:cin>>roll;
            if(roll == 'r'){
                int current_score =rand()%6+1;
                cout<< "\nplayer - "<<x<<" rolled "<<current_score<<"\n\n";
                int prev_score = scoreCard.find(to_string(players[i]))->second;
                if(current_score == 1 & prev_score == 1){
                    scores_one[i] = 1;
                    scores_two[i] = 1;
                }
                prev_score+=current_score;
                string key = to_string(players[i]);
                scoreCard.erase(to_string(players[i]));
                scoreCard.insert({key,prev_score});
                if(current_score == 6){
                    cout<<"player - "<<x<<" its your extra turn(press r to roll the dice)";
                    goto rollDice;
                }
                vector<pair<string, int> > A; 
                for (auto& it : scoreCard) { 
                    A.push_back(it); 
                } 
                sort(A.begin(), A.end(), cmp); 
                cout<<"player name  |  score  |   rank\n";
                int j=0,count =0;
                for (auto& in : A) {
                    cout <<"player - "<< in.first << "       " << in.second << "          "<<j+1;
                    if(in.second>=m){
                        cout<<"(completed the game)";
                        scores_one[j] = -2;
                        count++;
                    }
                    cout<<"\n";
                    j++;
                }
                if(count == n){
                    stop = 1;
                    cout<<"\n\nGame Ended...Thankyou for playing...\n\n";
                }
                
            }
            i++;
        }
        
         
      
    }
    return 0;
}


